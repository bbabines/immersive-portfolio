/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export default function PortfolioAvatar(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF("/PortfolioAvatar.glb");
	const { actions, names } = useAnimations(animations, group);

	const [currentAnimation, setCurrentAnimation] = useState("idle");

	useEffect(() => {
		actions[names[14]].play();
	}, []);

	const [keysPressed, setKeysPressed] = useState({});

	const handleKeyPress = (event) => {
		const keysOfInterest = [
			"w",
			"s",
			"a",
			"d",
			"Shift",
			"ArrowUp",
			"ArrowDown",
			"ArrowLeft",
			"ArrowRight",
		];
		if (keysOfInterest.includes(event.key)) {
			setKeysPressed((keys) => ({ ...keys, [event.key]: true }));
		}
	};

	const handleKeyRelease = (event) => {
		const keysOfInterest = [
			"w",
			"s",
			"a",
			"d",
			"Shift",
			"ArrowUp",
			"ArrowDown",
			"ArrowLeft",
			"ArrowRight",
		];
		if (keysOfInterest.includes(event.key)) {
			setKeysPressed((keys) => ({ ...keys, [event.key]: false }));
		}
	};

	useEffect(() => {
		const isWalkingOrRunningKey =
			keysPressed.w ||
			keysPressed.s ||
			keysPressed.a ||
			keysPressed.d ||
			keysPressed.ArrowUp ||
			keysPressed.ArrowDown ||
			keysPressed.ArrowLeft ||
			keysPressed.ArrowRight;

		if ((keysPressed.Shift && isWalkingOrRunningKey) || keysPressed.Shift) {
			actions[names[14]].stop(); // Stop idle animation
			actions[names[17]].stop(); // Stop walking animation
			actions[names[16]].play(); // Running animation
			setCurrentAnimation("running");
		} else if (isWalkingOrRunningKey) {
			actions[names[14]].stop(); // Stop idle animation
			actions[names[16]].stop(); // Stop running animation
			actions[names[17]].play(); // Walking animation
			setCurrentAnimation("walking");
		} else if (!isWalkingOrRunningKey && currentAnimation !== "idle") {
			actions[names[16]].stop(); // Stop running animation
			actions[names[17]].stop(); // Stop walking animation
			actions[names[14]].play(); // Idle animation
			setCurrentAnimation("idle");
		}
	}, [keysPressed, currentAnimation]);

	console.log(currentAnimation);

	useEffect(() => {
		window.addEventListener("keydown", handleKeyPress);
		window.addEventListener("keyup", handleKeyRelease);

		return () => {
			window.removeEventListener("keydown", handleKeyPress);
			window.removeEventListener("keyup", handleKeyRelease);
		};
	}, []);

	return (
		<group ref={group} {...props} dispose={null}>
			<group name="Scene">
				<group name="Armature" position={[0, 0.3, 0]}>
					<skinnedMesh
						name="Body"
						geometry={nodes.Body.geometry}
						material={materials["Knight_MAT2.002"]}
						skeleton={nodes.Body.skeleton}
						position={[3, -0.75, 0]}
						rotation={[Math.PI / 2, 0, 0]}
						scale={0.01}
					/>
					<skinnedMesh
						name="Head_Hands"
						geometry={nodes.Head_Hands.geometry}
						material={materials["Knight_MAT2.002"]}
						skeleton={nodes.Head_Hands.skeleton}
					/>
					<skinnedMesh
						name="Lower_Armor"
						geometry={nodes.Lower_Armor.geometry}
						material={materials["Knight_MAT2.002"]}
						skeleton={nodes.Lower_Armor.skeleton}
					/>
					<primitive object={nodes.mixamorigHips} />
					<primitive object={nodes.Ctrl_Master} />
					<primitive object={nodes.Ctrl_ArmPole_IK_Left} />
					<primitive object={nodes.Ctrl_Hand_IK_Left} />
					<primitive object={nodes.Ctrl_ArmPole_IK_Right} />
					<primitive object={nodes.Ctrl_Hand_IK_Right} />
					<primitive object={nodes.Ctrl_Foot_IK_Left} />
					<primitive object={nodes.Ctrl_LegPole_IK_Left} />
					<primitive object={nodes.Ctrl_Foot_IK_Right} />
					<primitive object={nodes.Ctrl_LegPole_IK_Right} />
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("/PortfolioAvatar.glb");
