/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations, Html } from "@react-three/drei";

import useAnimationStore from "../hooks/useAnimationStore";

export default function PortfolioAvatar(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF("/PortfolioAvatar.glb");
	const { actions, names } = useAnimations(animations, group);

	const setAnimationState = useAnimationStore(
		(state) => state.setAnimationState
	);

	const [keysPressed, setKeysPressed] = useState({});

	useEffect(() => {
		actions[names[14]].play();
	}, []);

	const handleKeyPress = (event) => {
		const codesOfInterest = [
			"KeyW",
			"KeyS",
			"KeyA",
			"KeyD",
			"ArrowUp",
			"ArrowDown",
			"ArrowLeft",
			"ArrowRight",
		];

		if (codesOfInterest.includes(event.code)) {
			setKeysPressed((keys) => ({
				...keys,
				[event.code]: true,
				Shift: event.shiftKey,
			}));
		}
	};

	const handleKeyRelease = (event) => {
		const codesOfInterest = [
			"KeyW",
			"KeyS",
			"KeyA",
			"KeyD",
			"ArrowUp",
			"ArrowDown",
			"ArrowLeft",
			"ArrowRight",
			"ShiftLeft",
			"ShiftRight",
		];

		if (
			codesOfInterest.includes(event.code) ||
			(event.code.startsWith("Shift") && !event.shiftKey)
		) {
			setKeysPressed((keys) => ({
				...keys,
				[event.code]: false,
				Shift: event.shiftKey,
			}));
		}
	};

	const isWalking =
		keysPressed.KeyW ||
		keysPressed.KeyS ||
		keysPressed.KeyA ||
		keysPressed.KeyD ||
		keysPressed.ArrowUp ||
		keysPressed.ArrowDown ||
		keysPressed.ArrowLeft ||
		keysPressed.ArrowRight;

	const isRunning = keysPressed.Shift && isWalking;

	useEffect(() => {
		if (isRunning) {
			actions[names[14]].stop(); // Stop idle animation
			actions[names[17]].stop(); // Stop walking animation
			actions[names[16]].play(); // Running animation
			setAnimationState("running");
		} else if (isWalking) {
			actions[names[14]].stop(); // Stop idle animation
			actions[names[16]].stop(); // Stop running animation
			actions[names[17]].play(); // Walking animation
			setAnimationState("walking");
		} else {
			actions[names[16]].stop(); // Stop running animation
			actions[names[17]].stop(); // Stop walking animation
			actions[names[14]].play(); // Idle animation
			setAnimationState("idle");
		}
	}, [keysPressed]);

	useEffect(() => {
		window.addEventListener("keydown", handleKeyPress);
		window.addEventListener("keyup", handleKeyRelease);

		return () => {
			window.removeEventListener("keydown", handleKeyPress);
			window.removeEventListener("keyup", handleKeyRelease);
		};
	}, []);

	return (
		<group ref={group} {...props} dispose={null}>
			<group name="Scene">
				{/* Name Overlay */}
				<Html center position={[0, 2.8, 0]}>
					{/* Some Tailwind styles don't work on the model therefore inline styling was used*/}
					<div
						style={{ userSelect: "none" }}
						className="flex flex-col justify-center items-center"
					>
						<p
							style={{ color: "#6ee06e", marginBottom: "-5px" }}
							className="w-[100px]"
						>
							Brad Babines
						</p>
						<p style={{ color: "#6ee06e" }} className="w-[200px] text-center">
							{"<React & three.js Dev>"}
						</p>
					</div>
				</Html>

				<group
					name="Armature"
					position={[0, 0.3, 0]}
					// Correct character rotation for spawning but messes up movement controls
					// rotation={[0, 2, 0]}
				>
					<skinnedMesh
						name="Body"
						geometry={nodes.Body.geometry}
						material={materials["Knight_MAT2.002"]}
						skeleton={nodes.Body.skeleton}
						position={[3, -0.75, 0]}
						rotation={[Math.PI / 2, 0, 0]}
						scale={0.01}
					/>
					<skinnedMesh
						name="Head_Hands"
						geometry={nodes.Head_Hands.geometry}
						material={materials["Knight_MAT2.002"]}
						skeleton={nodes.Head_Hands.skeleton}
					/>
					<skinnedMesh
						name="Lower_Armor"
						geometry={nodes.Lower_Armor.geometry}
						material={materials["Knight_MAT2.002"]}
						skeleton={nodes.Lower_Armor.skeleton}
					/>
					<primitive object={nodes.mixamorigHips} />
					<primitive object={nodes.Ctrl_Master} />
					<primitive object={nodes.Ctrl_ArmPole_IK_Left} />
					<primitive object={nodes.Ctrl_Hand_IK_Left} />
					<primitive object={nodes.Ctrl_ArmPole_IK_Right} />
					<primitive object={nodes.Ctrl_Hand_IK_Right} />
					<primitive object={nodes.Ctrl_Foot_IK_Left} />
					<primitive object={nodes.Ctrl_LegPole_IK_Left} />
					<primitive object={nodes.Ctrl_Foot_IK_Right} />
					<primitive object={nodes.Ctrl_LegPole_IK_Right} />
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("/PortfolioAvatar.glb");
